{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\New\\\\Downloads\\\\iRAP-Minirescue-GUI-main\\\\iRAP-Minirescue-GUI-main\\\\src\\\\components\\\\GamepadAPI\\\\index.tsx\";\nimport React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass GamepadComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGamepadConnection = event => {\n      this.setState({\n        gamepad: event.gamepad\n      });\n      if (event.gamepad && event.gamepad.vibrationActuator) {\n        event.gamepad.vibrationActuator.playEffect(\"dual-rumble\", {\n          startDelay: 0,\n          duration: 1000,\n          weakMagnitude: 1.0,\n          strongMagnitude: 1.0\n        });\n      }\n      if (this.props.onJoyStickConnection) {\n        this.props.onJoyStickConnection(true);\n      }\n      console.log(\"Gamepad connected:\", event.gamepad);\n    };\n    this.handleGamepadDisconnection = event => {\n      this.setState({\n        gamepad: null\n      });\n      if (this.props.onJoyStickConnection) {\n        this.props.onJoyStickConnection(false);\n      }\n      console.log(\"Gamepad disconnected:\", event.gamepad);\n    };\n    this.publishFloat32MultiArray = data => {\n      const float32MultiArrayMessage = new ROSLIB.Message({\n        layout: {\n          dim: [],\n          data_offset: 0\n        },\n        data: data\n      });\n      this.state.joypadRosTopic.publish(float32MultiArrayMessage);\n    };\n    this.publishJoyMessage = (axes, buttons) => {\n      const pressedButtons = buttons.map(button => button.pressed ? 1 : 0);\n      const joyMessage = new ROSLIB.Message({\n        header: {\n          stamp: {\n            sec: 0,\n            nsec: 0\n          },\n          frame_id: ''\n        },\n        axes: axes,\n        // Assuming robotSpeedRight, robotSpeedLeft, robotSpeedFlipper\n        buttons: pressedButtons // You can add button data if needed\n      });\n      this.state.sensorJoyTopic.publish(joyMessage);\n    };\n    this.updateGamepadState = () => {\n      const {\n        gamepad\n      } = this.state;\n      if (gamepad) {\n        if (this.props.onAxesChange) {\n          this.props.onAxesChange([...gamepad.axes]);\n          console.log(gamepad.axes);\n        }\n        if (this.props.onButtonsChange) {\n          this.props.onButtonsChange([...gamepad.buttons]);\n        }\n        if (gamepad.buttons[4].pressed == 0 && gamepad.buttons[6].pressed == 0) {\n          this.setState({\n            robotSpeedLeft: 0\n          });\n        } else if (gamepad.buttons[4].pressed == 1) {\n          this.setState({\n            robotSpeedLeft: this.state.boostMode ? 147 : 294\n          });\n        } else if (gamepad.buttons[6].pressed == 1) {\n          this.setState({\n            robotSpeedLeft: -(this.state.boostMode ? 147 : 294)\n          });\n        }\n        if (gamepad.buttons[5].pressed == 0 && gamepad.buttons[7].pressed == 0) {\n          this.setState({\n            robotSpeedRight: 0\n          });\n        } else if (gamepad.buttons[5].pressed == 1) {\n          this.setState({\n            robotSpeedRight: this.state.boostMode ? 147 : 294\n          });\n        } else if (gamepad.buttons[7].pressed == 1) {\n          this.setState({\n            robotSpeedRight: -(this.state.boostMode ? 147 : 294)\n          });\n        }\n        if (gamepad.buttons[3].pressed == 0 && gamepad.buttons[0].pressed == 0) {\n          this.setState({\n            robotSpeedFlipper: 0\n          });\n        } else if (gamepad.buttons[3].pressed == 1) {\n          this.setState({\n            robotSpeedFlipper: 16999\n          });\n        } else if (gamepad.buttons[0].pressed == 1) {\n          this.setState({\n            robotSpeedFlipper: -16999\n          });\n        }\n        if (gamepad.buttons[2].pressed) {\n          if (this.state.onetimeTicker == false) {\n            this.setState({\n              boostMode: !this.state.boostMode\n            });\n            this.setState({\n              onetimeTicker: true\n            });\n          }\n        } else {\n          this.setState({\n            onetimeTicker: false\n          });\n        }\n\n        //(360/140)\n\n        // console.log(\"flipper : \" , this.state.robotSpeedFlipper)\n\n        // console.log(\"L :\", this.state.robotSpeedLeft)\n        // console.log(\"R : \", this.state.robotSpeedRight)\n\n        // console.log(\"L1 : \", gamepad.buttons[4].pressed)\n        // console.log(\"L2 : \", gamepad.buttons[6].pressed)\n\n        // console.log(\"R1 : \", gamepad.buttons[5].pressed)\n        // console.log(\"R2 : \", gamepad.buttons[7].pressed)\n\n        // console.log(\"R1 : \", gamepad.buttons[5].pressed)\n        // console.log(\"R2 : \", gamepad.buttons[7].pressed)\n\n        // console.log(\"Triangle : \", gamepad.buttons[3].pressed)\n        // console.log(\"Rectangle : \", gamepad.buttons[2].pressed)\n        // console.log(\"X : \", gamepad.buttons[0].pressed)\n        // console.log(\"() : \", gamepad.buttons[1].pressed)\n\n        // publishFloat32MultiArray()\n\n        // Publish the message to the ROS topic\n        if (this.props.joyEnable) {\n          let publishFloat = [this.state.robotSpeedRight, this.state.robotSpeedLeft, this.state.robotSpeedFlipper];\n          this.publishJoyMessage(gamepad.axes, gamepad.buttons);\n          this.publishFloat32MultiArray(publishFloat);\n        } else {\n          this.publishFloat32MultiArray([0, 0, 0]);\n        }\n      }\n    };\n    this.gameLoop = () => {\n      const gamepads = navigator.getGamepads();\n      if (gamepads[0]) {\n        this.setState({\n          gamepad: gamepads[0]\n        });\n        this.updateGamepadState();\n      }\n      requestAnimationFrame(this.gameLoop);\n    };\n    this.state = {\n      gamepad: null,\n      joypadRosTopic: new ROSLIB.Topic({\n        ros: this.props.ros,\n        name: this.props.joypadTopicName,\n        // Adjust the topic name based on your setup, e.g., '/your_joy_topic'\n        messageType: 'std_msgs/Float32MultiArray' // Adjust the message type based on your setup\n      }),\n      sensorJoyTopic: new ROSLIB.Topic({\n        ros: this.props.ros,\n        name: '/gui/output/joy',\n        // Adjust the topic name based on your setup, e.g., '/your_joy_topic'\n        messageType: 'sensor_msgs/Joy' // Adjust the message type based on your setup\n      }),\n      robotSpeedLeft: 0,\n      robotSpeedRight: 0,\n      robotSpeedFlipper: 0,\n      boostMode: false,\n      onetimeTicker: false\n    };\n  }\n  componentDidMount() {\n    console.log(\"gameapi\", this.props.ros);\n    window.addEventListener(\"gamepadconnected\", this.handleGamepadConnection);\n    window.addEventListener(\"gamepaddisconnected\", this.handleGamepadDisconnection);\n\n    // Start the game loop to continuously update gamepad state\n    this.gameLoop();\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"gamepadconnected\", this.handleGamepadConnection);\n    window.removeEventListener(\"gamepaddisconnected\", this.handleGamepadDisconnection);\n  }\n  render() {\n    const {\n      gamepad\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default GamepadComponent;","map":{"version":3,"names":["React","Component","ROSLIB","jsxDEV","_jsxDEV","GamepadComponent","constructor","props","handleGamepadConnection","event","setState","gamepad","vibrationActuator","playEffect","startDelay","duration","weakMagnitude","strongMagnitude","onJoyStickConnection","console","log","handleGamepadDisconnection","publishFloat32MultiArray","data","float32MultiArrayMessage","Message","layout","dim","data_offset","state","joypadRosTopic","publish","publishJoyMessage","axes","buttons","pressedButtons","map","button","pressed","joyMessage","header","stamp","sec","nsec","frame_id","sensorJoyTopic","updateGamepadState","onAxesChange","onButtonsChange","robotSpeedLeft","boostMode","robotSpeedRight","robotSpeedFlipper","onetimeTicker","joyEnable","publishFloat","gameLoop","gamepads","navigator","getGamepads","requestAnimationFrame","Topic","ros","name","joypadTopicName","messageType","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","render","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/New/Downloads/iRAP-Minirescue-GUI-main/iRAP-Minirescue-GUI-main/src/components/GamepadAPI/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n\ninterface GamepadComponentProps {\n  ros: ROSLIB.Ros\n  joypadTopicName: string\n  joyEnable: boolean\n  onAxesChange?: (axes: number[]) => void;\n  onButtonsChange?: (buttons: GamepadButton[]) => void;\n  onJoyStickConnection?: (connection: boolean) => void;\n}\n\ninterface GamepadComponentState {\n  gamepad: Gamepad | null | any;\n  joypadRosTopic: ROSLIB.Topic<ROSLIB.Message>\n  sensorJoyTopic: ROSLIB.Topic<ROSLIB.Message>\n  robotSpeedLeft: number;\n  robotSpeedRight: number;\n  robotSpeedFlipper: number;\n  boostMode : boolean;\n  onetimeTicker : boolean;\n}\n\n\nclass GamepadComponent extends Component<GamepadComponentProps, GamepadComponentState> {\n  constructor(props: GamepadComponentProps) {\n    super(props);\n    this.state = {\n      gamepad: null,\n      joypadRosTopic: new ROSLIB.Topic({\n        ros: this.props.ros,\n        name: this.props.joypadTopicName, // Adjust the topic name based on your setup, e.g., '/your_joy_topic'\n        messageType: 'std_msgs/Float32MultiArray', // Adjust the message type based on your setup\n      }),\n      sensorJoyTopic: new ROSLIB.Topic({\n        ros: this.props.ros,\n        name: '/gui/output/joy', // Adjust the topic name based on your setup, e.g., '/your_joy_topic'\n        messageType: 'sensor_msgs/Joy', // Adjust the message type based on your setup\n      }),\n      robotSpeedLeft: 0,\n      robotSpeedRight: 0,\n      robotSpeedFlipper: 0,\n      boostMode : false,\n      onetimeTicker : false,\n    };\n  }\n\n\n\n  componentDidMount() {\n    console.log(\"gameapi\" , this.props.ros)\n    window.addEventListener(\"gamepadconnected\", this.handleGamepadConnection);\n    window.addEventListener(\"gamepaddisconnected\", this.handleGamepadDisconnection);\n\n    // Start the game loop to continuously update gamepad state\n    this.gameLoop();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"gamepadconnected\", this.handleGamepadConnection);\n    window.removeEventListener(\"gamepaddisconnected\", this.handleGamepadDisconnection);\n  }\n\n  handleGamepadConnection = (event: any) => {\n    this.setState({ gamepad: event.gamepad });\n\n    if (event.gamepad && event.gamepad.vibrationActuator) {\n      event.gamepad.vibrationActuator.playEffect(\"dual-rumble\", {\n        startDelay: 0,\n        duration: 1000,\n        weakMagnitude: 1.0,\n        strongMagnitude: 1.0\n      });\n    }\n\n    if (this.props.onJoyStickConnection) {\n      this.props.onJoyStickConnection(true);\n    }\n\n    console.log(\"Gamepad connected:\", event.gamepad);\n  };\n\n  handleGamepadDisconnection = (event: GamepadEvent) => {\n    this.setState({ gamepad: null });\n\n\n    if (this.props.onJoyStickConnection) {\n      this.props.onJoyStickConnection(false);\n    }\n\n\n    console.log(\"Gamepad disconnected:\", event.gamepad);\n  };\n\n  publishFloat32MultiArray = (data: number[]) => {\n    const float32MultiArrayMessage = new ROSLIB.Message({\n      layout: {\n        dim: [],\n        data_offset: 0,\n      },\n      data: data,\n    });\n    \n\n    this.state.joypadRosTopic.publish(float32MultiArrayMessage);\n  };\n\n  publishJoyMessage = (axes: number[] , buttons :  GamepadButton[]) => {\n    const pressedButtons = buttons.map(button => (button.pressed ? 1 : 0));\n    const joyMessage = new ROSLIB.Message({\n      header: {\n        stamp: { sec: 0, nsec: 0 },\n        frame_id: '',\n      },\n      axes: axes, // Assuming robotSpeedRight, robotSpeedLeft, robotSpeedFlipper\n      buttons: pressedButtons, // You can add button data if needed\n    });\n  \n    this.state.sensorJoyTopic.publish(joyMessage)\n  };\n\n  updateGamepadState = () => {\n\n    const { gamepad } = this.state;\n    if (gamepad) {\n      if (this.props.onAxesChange) {\n        this.props.onAxesChange([...gamepad.axes]);\n        console.log(gamepad.axes)\n      }\n\n      if (this.props.onButtonsChange) {\n        this.props.onButtonsChange([...gamepad.buttons]);\n      }\n\n      if (gamepad.buttons[4].pressed == 0 && gamepad.buttons[6].pressed == 0) {\n        this.setState({ robotSpeedLeft: 0 })\n      }\n      else if (gamepad.buttons[4].pressed == 1) {\n        this.setState({ robotSpeedLeft: this.state.boostMode ? 147 : 294 })\n      }\n      else if (gamepad.buttons[6].pressed == 1) {\n        this.setState({ robotSpeedLeft: -(this.state.boostMode ? 147 : 294) })\n      }\n\n\n      if (gamepad.buttons[5].pressed == 0 && gamepad.buttons[7].pressed == 0) {\n        this.setState({ robotSpeedRight: 0 })\n      }\n      else if (gamepad.buttons[5].pressed == 1) {\n        this.setState({ robotSpeedRight: (this.state.boostMode ? 147 : 294) })\n      }\n      else if (gamepad.buttons[7].pressed == 1) {\n        this.setState({ robotSpeedRight: - (this.state.boostMode ? 147 : 294) })\n      }\n\n      if (gamepad.buttons[3].pressed == 0 && gamepad.buttons[0].pressed == 0) {\n        this.setState({ robotSpeedFlipper: 0 })\n      }\n      else if (gamepad.buttons[3].pressed == 1) {\n        this.setState({ robotSpeedFlipper: 16999 })\n      }\n      else if (gamepad.buttons[0].pressed == 1) {\n        this.setState({ robotSpeedFlipper: -16999 })\n      }\n\n      if(gamepad.buttons[2].pressed){\n          if(this.state.onetimeTicker == false){\n            this.setState({boostMode : !this.state.boostMode})\n            this.setState({onetimeTicker : true})\n          }\n      }\n      else{\n        this.setState({onetimeTicker : false})\n      }\n      \n      //(360/140)\n\n\n\n      // console.log(\"flipper : \" , this.state.robotSpeedFlipper)\n\n      // console.log(\"L :\", this.state.robotSpeedLeft)\n      // console.log(\"R : \", this.state.robotSpeedRight)\n\n      // console.log(\"L1 : \", gamepad.buttons[4].pressed)\n      // console.log(\"L2 : \", gamepad.buttons[6].pressed)\n\n      // console.log(\"R1 : \", gamepad.buttons[5].pressed)\n      // console.log(\"R2 : \", gamepad.buttons[7].pressed)\n\n      // console.log(\"R1 : \", gamepad.buttons[5].pressed)\n      // console.log(\"R2 : \", gamepad.buttons[7].pressed)\n\n\n      // console.log(\"Triangle : \", gamepad.buttons[3].pressed)\n      // console.log(\"Rectangle : \", gamepad.buttons[2].pressed)\n      // console.log(\"X : \", gamepad.buttons[0].pressed)\n      // console.log(\"() : \", gamepad.buttons[1].pressed)\n\n\n\n      // publishFloat32MultiArray()\n\n      // Publish the message to the ROS topic\n      if (this.props.joyEnable) {\n        let publishFloat = [this.state.robotSpeedRight, this.state.robotSpeedLeft, this.state.robotSpeedFlipper]\n        this.publishJoyMessage(gamepad.axes , gamepad.buttons)\n        this.publishFloat32MultiArray(publishFloat);\n      }\n      else{\n        this.publishFloat32MultiArray([0,0,0]);\n      }\n\n    }\n  };\n\n  gameLoop = () => {\n\n    const gamepads = navigator.getGamepads();\n    if (gamepads[0]) {\n      this.setState({ gamepad: gamepads[0] });\n      this.updateGamepadState();\n    }\n\n    requestAnimationFrame(this.gameLoop);\n  };\n\n  render() {\n    const { gamepad } = this.state;\n\n    return (\n      <div>\n\n      </div>\n    );\n  }\n}\n\nexport default GamepadComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}