{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\New\\\\Downloads\\\\iRAP-Minirescue-GUI-main\\\\iRAP-Minirescue-GUI-main\\\\src\\\\components\\\\FlipperVisualization\\\\index.tsx\";\nimport React, { Component } from 'react';\nimport { Image } from 'react-bootstrap';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport background_map from './resources/robot_background_x.png';\nimport robot from '../FlipperVisualization/resources/robot_body.png';\nimport robot_lift from '../FlipperVisualization/resources/robot_flipper.png';\n// import baseMapA from './resources/baseMapA.jpg';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass FlipperVisualization extends Component {\n  constructor(props) {\n    super(props);\n    this.robotImageRef = void 0;\n    this.interval = null;\n    this.componentDidMount = () => {\n      // this.moveRobot()\n      // console.log(\"reset\")/\n      // this.interval = setInterval(this.moveRobot)\n    };\n    this.robotRenderComponents = () => {\n      const robotImageStyleA = {\n        position: 'absolute',\n        top: `${40}px`,\n        //robotImagePosition.y\n        left: `${10}px`,\n        //robotImagePosition.x\n        width: '200px',\n        height: 'auto',\n        justifyContent: 'center'\n        // border: '1px solid red',\n      };\n      const LiftImageStyleA = {\n        position: 'relative',\n        top: `${120}px`,\n        //liftImagePosition.y\n        left: `${-30}px`,\n        // liftImagePosition.x\n        transformOrigin: '75% 50%',\n        transform: `rotate(${this.props.flipperDegree}deg) translate(0%,0%)`,\n        width: '100px',\n        height: '70px',\n        justifyContent: 'center'\n        // border: '1px solid red',\n      };\n      const painterConfig = {\n        position: 'relative',\n        top: '-90%',\n        left: '0%'\n        // border: '1px solid red',\n      };\n\n      // console.log(RobotOdometry);\n\n      const setImagePoint = {\n        position: 'absolute',\n        left: '25%',\n        // Adjust these values to position the origin point\n        width: '50%',\n        height: '1%'\n      };\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: painterConfig,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: setImagePoint,\n            children: [/*#__PURE__*/_jsxDEV(Image, {\n              src: robot,\n              alt: \"Robot\",\n              style: robotImageStyleA,\n              className: \"robot-image img-fluid\",\n              ref: this.robotImageRef,\n              onClick: () => {}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Image, {\n              src: robot_lift,\n              alt: \"Robot\",\n              style: LiftImageStyleA,\n              className: \"robot-image img-fluid\",\n              ref: this.robotImageRef,\n              onClick: () => {}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    };\n    this.state = {\n      state: false\n    };\n    this.robotImageRef = /*#__PURE__*/React.createRef();\n  }\n  componentWillUnmount() {}\n  render() {\n    let axis_x = -80;\n    let axis_y = -70;\n    let scale = 1.5;\n    const setImageOrigin = {\n      transformOrigin: '50% 50%',\n      transform: `rotate(${this.props.pitchDegree}deg) translate(0%,0%)`\n    };\n    return /*#__PURE__*/_jsxDEV(TransformWrapper, {\n      initialScale: scale,\n      minScale: scale,\n      maxScale: scale,\n      initialPositionX: axis_x,\n      initialPositionY: axis_y,\n      minPositionX: axis_x,\n      maxPositionX: axis_x,\n      minPositionY: axis_y,\n      maxPositionY: axis_y,\n      children: ({\n        zoomIn,\n        zoomOut\n      }) => /*#__PURE__*/_jsxDEV(TransformComponent, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: setImageOrigin,\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: background_map,\n            fluid: true,\n            className: \"responsive-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 29\n          }, this), this.robotRenderComponents()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default FlipperVisualization;","map":{"version":3,"names":["React","Component","Image","TransformWrapper","TransformComponent","background_map","robot","robot_lift","jsxDEV","_jsxDEV","Fragment","_Fragment","FlipperVisualization","constructor","props","robotImageRef","interval","componentDidMount","robotRenderComponents","robotImageStyleA","position","top","left","width","height","justifyContent","LiftImageStyleA","transformOrigin","transform","flipperDegree","painterConfig","setImagePoint","children","style","src","alt","className","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","state","createRef","componentWillUnmount","render","axis_x","axis_y","scale","setImageOrigin","pitchDegree","initialScale","minScale","maxScale","initialPositionX","initialPositionY","minPositionX","maxPositionX","minPositionY","maxPositionY","zoomIn","zoomOut","fluid"],"sources":["C:/Users/New/Downloads/iRAP-Minirescue-GUI-main/iRAP-Minirescue-GUI-main/src/components/FlipperVisualization/index.tsx"],"sourcesContent":["import React, { Component, ChangeEvent, RefObject } from 'react';\nimport { Container, Image, Form, Button, Card } from 'react-bootstrap';\n\nimport Draggable from 'react-draggable';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport background_map from './resources/robot_background_x.png'\nimport robot from '../FlipperVisualization/resources/robot_body.png'\n\n\nimport robot_lift from '../FlipperVisualization/resources/robot_flipper.png'\n// import baseMapA from './resources/baseMapA.jpg';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport configs from '../../configs';\nimport ROSLIB from 'roslib';\n\ninterface MapProps {\n   pitchDegree : number\n   flipperDegree : number\n}\n\ninterface MapState {\n    state : boolean\n}\n\nclass FlipperVisualization extends Component<MapProps, MapState> {\n    private robotImageRef: RefObject<HTMLImageElement>;\n    interval: NodeJS.Timeout | null = null;\n\n    constructor(props: MapProps) {\n        super(props);\n        this.state = {\n          state : false,\n        };\n        this.robotImageRef = React.createRef();\n    }\n\n    componentDidMount = () => {\n        // this.moveRobot()\n        // console.log(\"reset\")/\n        // this.interval = setInterval(this.moveRobot)\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n\n    robotRenderComponents = () => {\n\n\n        const robotImageStyleA: React.CSSProperties = {\n            position: 'absolute',\n            top: `${40}px`, //robotImagePosition.y\n            left: `${10}px`, //robotImagePosition.x\n            width: '200px',\n            height: 'auto',\n            justifyContent: 'center',\n            // border: '1px solid red',\n\n        };\n\n        const LiftImageStyleA: React.CSSProperties = {\n            position: 'relative',\n            top: `${120}px`,  //liftImagePosition.y\n            left: `${-30}px`, // liftImagePosition.x\n            transformOrigin: '75% 50%',\n            transform: `rotate(${this.props.flipperDegree}deg) translate(0%,0%)`,\n            width: '100px',\n            height: '70px',\n            justifyContent: 'center',\n            // border: '1px solid red',\n            \n        };\n\n        const painterConfig: React.CSSProperties = {\n            position: 'relative',\n            top: '-90%',\n            left: '0%',\n            // border: '1px solid red',\n        };\n\n        // console.log(RobotOdometry);\n\n        const setImagePoint: React.CSSProperties = {\n            position: 'absolute',\n            left: '25%',  // Adjust these values to position the origin point\n            width: '50%',\n            height: '1%',\n        };\n\n\n\n        return <>\n\n\n            <div style={painterConfig}>\n                <div style={setImagePoint}>\n                    <Image\n                        src={robot}\n                        alt=\"Robot\"\n                        style={robotImageStyleA}\n                        className=\"robot-image img-fluid\"\n                        ref={this.robotImageRef}\n                        onClick={() => {\n                        }}\n                    />\n                    <Image\n                        src={robot_lift}\n                        alt=\"Robot\"\n                        style={LiftImageStyleA}\n                        className=\"robot-image img-fluid\"\n                        ref={this.robotImageRef}\n                        onClick={() => {\n                        }}\n                    />\n                </div>\n            </div>\n        </>\n    }\n\n\n\n    render() {\n     \n        let axis_x = -80\n        let axis_y = -70\n        let scale = 1.5\n\n\n        const setImageOrigin: React.CSSProperties = {\n            transformOrigin: '50% 50%',\n            transform: `rotate(${this.props.pitchDegree}deg) translate(0%,0%)`,\n        };\n\n\n        return (\n            <TransformWrapper initialScale={scale} minScale={scale} maxScale={scale}\n                initialPositionX={axis_x}\n                initialPositionY={axis_y}\n\n                minPositionX={axis_x}\n                maxPositionX={axis_x}\n\n                minPositionY={axis_y}\n                maxPositionY={axis_y}\n            >\n                {({ zoomIn, zoomOut }) => (\n                    <TransformComponent >\n                        <div style={setImageOrigin}>\n                            <Image src={background_map} fluid className=\"responsive-image\"/>\n                            {this.robotRenderComponents()}\n                        </div>\n                    </TransformComponent>\n                )}\n            </TransformWrapper>\n\n        );\n    }\n}\n\nexport default FlipperVisualization;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}